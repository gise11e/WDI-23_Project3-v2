{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/dragDrop.js","js/models/group.js","js/controllers/groups.js","js/controllers/main.js","js/controllers/upload.js","js/models/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","facebook","clientId","console","log","RegisterController","User","$auth","$state","submit","signup","register","user","then","go","catch","response","this","LoginController","$window","login","credentials","payload","getPayload","groupId","localStorage","getItem","setItem","_id","removeItem","authenticate","provider","isAuthenticated","dragDrop","reader","FileReader","restrict","replace","scope","base64","link","$scope","element","active","onload","result","$apply","on","e","preventDefault","file","dataTransfer","files","target","readAsDataURL","Group","$resource","id","update","method","getGroups","isArray","GroupsNewController","createGroupProfile","groupsNew","group","groupAdmin","groupMembers","push","save","res","addEmail","event","emailArray","emailToAddToArray","add","GroupsShowController","$http","drawMatches","token","getToken","req","groupsShow","headers","authorizaton","alert","isGroupAdmin","usersId","message","includes","sendEmail","data","groupName","deleteGroup","$remove","get","params","userData","delete","isLoggedIn","GroupsEditController","groupsEdit","$update","GroupsJoinController","userId","isInGroup","filter","member","length","MainController","$rootScope","toggleMenu","main","menuVisible","logout","UploadController","upload","UsersIndexController","usersIndex","all","query","ProfileController","isOwnProfile","addLikes","profile","likes","likeToAddToArray","addDislikes","dislikes","dislikeToAddToArray","removeLike","thing","index","$index","indexOf","splice","reload","removeDislike","addImage","profileImage","imageToAdd","getUserGroups","usersGroups","requestURL","searchForMatch","nameKey","myArray","i","getUserMatches","usersCurrentMatches","usersMatches","forEach","obj","resultObject","matches","undefined","getGifts","keyword","site","loaded","giftArray","Items","Item","results","etsyItem","DetailPageURL","MediumImage","URL","MainImage","url_170x135","ItemAttributes","ListPrice","FormattedPrice","price","randomLike","Math","floor","random","ProfileEditController","profileEdit","UserEditController","userEdit","angular","module","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n.module('elfyApp', ['ngResource', 'ui.router', 'satellizer'])\n.config(Router)\n.config(Auth);\n\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('splash', {\n    url: '/',\n    templateUrl: '/templates/splash.html',\n    controller: 'LoginController as login'\n  })\n  .state('profile', {\n    url: '/profile/:id',\n    templateUrl: '/templates/profile.html',\n    controller: 'ProfileController as profile'\n  })\n  .state('groupsNew', {\n    url: '/group/new',\n    templateUrl: '/templates/groupNew.html',\n    controller: 'GroupsNewController as groupsNew'\n  })\n  .state('groupProfile', {\n    url: '/group/profile/:id',\n    templateUrl: '/templates/groupProfile.html',\n    controller: 'GroupsShowController as groupsShow'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('groupJoin', {\n    url: '/join/:groupId',\n    templateUrl: '/templates/login.html',\n    controller: 'GroupsJoinController as groupsJoin'\n  })\n  .state('profileEdit', {\n    url: '/profile/:id/edit',\n    templateUrl: '/templates/profileEdit.html',\n    controller: 'ProfileEditController as profileEdit'\n  });\n\n  $urlRouterProvider.otherwise('/');\n\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.facebook({\n    clientId: '1117238161723560'\n  });\n\n  console.log($authProvider);\n\n}\n","angular.module('elfyApp')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['User','$auth', '$state'];\nfunction RegisterController(User, $auth, $state) {\n  const register = this;\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    }).catch((response) => {\n      console.log(response);\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['User','$auth','$state', '$window'];\n\nfunction LoginController(User, $auth, $state, $window) {\n  const login = this;\n  login.credentials = {};\n\n  //forward state if authenticated\n  if($auth.isAuthenticated()) {\n    $state.go('profile');\n  }\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      const payload = $auth.getPayload();\n      const groupId = $window.localStorage.getItem('groupId');\n\n      $window.localStorage.setItem('userId', payload._id);\n\n      if(groupId) {\n        $window.localStorage.removeItem('groupId');\n        $state.go('groupJoin', { groupId });\n      } else {\n        $state.go('profile');\n      }\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then(() => {\n      $state.go('profile');\n    });\n  }\n\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('elfyApp')\n  .directive('dragDrop', dragDrop);\n\nfunction dragDrop () {\n\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n\n      $scope.base64 = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n\n      element\n        .on('dragover', () => {\n          $scope.active = true;\n          $scope.$apply();\n          console.log('yo you are hovering');\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n          console.log('you dropped');\n          const file = (e.dataTransfer.files || e.target.files)[0];\n\n          reader.readAsDataURL(file);\n        });\n    }\n  };\n}\n","angular.module('elfyApp')\n  .factory('Group', Group);\n\nGroup.$inject = ['$resource'];\nfunction Group($resource) {\n\n  return new $resource('/groups/:id', { id: '@_id' }, {\n    update: { method: 'PUT' },\n    getGroups: {method: 'GET', isArray: true}\n  });\n}\n","angular.module('elfyApp')\n.controller('GroupsNewController', GroupsNewController)\n.controller('GroupsShowController', GroupsShowController)\n.controller('GroupsEditController', GroupsEditController)\n.controller('GroupsJoinController', GroupsJoinController);\n// .controller('groupController', groupController);\n\n\n//\n// groupController.$inject = ['Group', '$state', '$auth'];\n// function groupController(Group, $state, $auth) {\n//   const group = this;\n//   const userData = $auth.getPayload();\n//\n//   console.log(userData);\n//\n//   group.group =Group.get({ id: userData._id });\n// }\n\n\n\nGroupsNewController.$inject = ['Group', '$state', '$auth'];\nfunction GroupsNewController(Group, $state, $auth) {\n  const groupsNew = this;\n  groupsNew.group = {};\n  groupsNew.group.groupMembers= [];\n\n\n  function createGroupProfile() {\n    // console.log();\n    // groupsNew.group.emailArray = groupsNew.emailArray;\n    groupsNew.group.groupAdmin = $auth.getPayload()._id;\n    groupsNew.group.groupMembers.push($auth.getPayload()._id);\n\n\n    Group.save(groupsNew.group, (res) => {\n\n      $state.go('groupProfile',{id: res._id});\n\n    });\n  }\n\n  function addEmail() {\n    event.preventDefault();\n    groupsNew.emailArray.push(groupsNew.emailToAddToArray);\n  }\n\n  groupsNew.createGroupProfile = createGroupProfile;\n  groupsNew.add = addEmail;\n}\n\nGroupsShowController.$inject = ['Group', '$state', '$auth', '$http'];\nfunction GroupsShowController(Group, $state, $auth, $http) {\n  const groupsShow = this;\n  // console.log(groupsShow);\n  groupsShow.group = Group.get($state.params);\n\n  groupsShow.emailToAddToArray = '';\n  groupsShow.emailArray = [];\n\n  function drawMatches() {\n    const token = `Bearer ${$auth.getToken()}`;\n    const req = {\n      method: 'PUT',\n      url: '/groups/' + groupsShow.group._id + '/draw',\n      headers: { authorizaton: token }\n    };\n    $http(req).then((res) => alert('drawn group'));\n  }\n\n  const userData = $auth.getPayload();\n  const usersId = userData._id;\n\n  function isGroupAdmin() {\n    console.log('Group admin ID:', groupsShow.group.groupAdmin._id, 'Users ID', usersId);\n    console.log(groupsShow.group.groupAdmin._id === usersId ? true : false);\n    return groupsShow.group.groupAdmin._id === usersId ? true : false;\n  }\n\n  function addEmail() {\n    groupsShow.message ='';\n    if(!groupsShow.emailArray.includes(groupsShow.emailToAddToArray)) {\n      groupsShow.emailArray.push(groupsShow.emailToAddToArray);\n      groupsShow.emailToAddToArray = '';\n\n    } else {\n      groupsShow.message = 'Email already added';\n    }\n  }\n  function sendEmail() {\n    console.log(groupsShow);\n    const token = `Bearer ${$auth.getToken()}`;\n    const req = {\n      method: 'POST',\n      url: '/sendEmail',\n      headers: { authorizaton: token },\n      data: { emailArray: groupsShow.emailArray, groupName: groupsShow.group.groupName, groupId: groupsShow.group._id }\n    };\n\n    $http(req)\n    .then((res) => {\n      groupsShow.emailArray = [];\n      groupsShow.message = 'Your Invites Have Been Sent!'\n      console.log(res);\n    });\n  }\n\n  function deleteGroup() {\n    groupsShow.group.$remove(() => {\n      $state.go('groupsNew');\n    });\n  }\n\n  groupsShow.delete = deleteGroup;\n\n  groupsShow.isLoggedIn = $auth.isAuthenticated;\n  groupsShow.addEmail = addEmail;\n  groupsShow.sendEmail = sendEmail;\n  groupsShow.drawMatches = drawMatches;\n  groupsShow.isGroupAdmin = isGroupAdmin;\n}\n\nGroupsEditController.$inject = ['Group', '$state'];\nfunction GroupsEditController(Group, $state) {\n  const groupsEdit = this;\n\n  groupsEdit.group = Group.get($state.params);\n\n  function update() {\n    groupsEdit.group.$update(() => {\n      $state.go('groupProfile', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\nGroupsJoinController.$inject = ['Group', 'User','$state', '$auth', '$window'];\nfunction GroupsJoinController(Group, User, $state, $auth, $window) {\n\n  // check if user is logged in...\n  if($auth.isAuthenticated()) {\n    const userId = $auth.getPayload()._id;\n    const groupId = $state.params.groupId;\n    // if yes, get the group\n    Group.get({ id: groupId }, (group) => {\n\n    const isInGroup = group.groupMembers.filter(function(member){ return member._id === userId; });\n\n      if (isInGroup.length === 0) {\n        group.groupMembers.push(userId);\n        group.$update(() => {\n          $state.go('groupProfile', {id: groupId });\n        });\n\n      }  else {\n        $state.go('groupProfile', {id: groupId });\n      }\n    });\n  }\n  else {\n    console.log(\"hey\");\n    // if no, store the group Id in localStorage, redirect the user to login/register state(s)\n    $window.localStorage.setItem('groupId', $state.params.groupId);\n    $state.go('register');\n  }\n\n  // after login/register, if there is a group Id in localStorage, send the join request & remove the group Id\n\n\n\n}\n","angular.module('elfyApp')\n\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', '$http'];\nfunction MainController($auth, $state, $rootScope, $http) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.menuVisible = false;\n\n\nfunction toggleMenu() {\n  if (main.menuVisible === false) {\n    main.menuVisible = true;\n  } else {\n    main.menuVisible = false;\n  }\n}\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      localStorage.removeItem('userId');\n      $state.go('splash');\n    });\n  }\n\n  // const protectedStates = ['register', 'login'];\n\n  // function secureState(e, toSate) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toSate.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //\n  //   }\n  //\n  // }\n  //\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n  main.toggleMenu = toggleMenu;\n\n\n}\n","angular.module('elfyApp')\n  .controller('UploadController', UploadController);\n\nfunction UploadController() {\n  const upload = this;\n\n  upload.data = {};\n}\n","angular.module('elfyApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n    \n  });\n}\n","angular.module('elfyApp')\n.controller('UsersIndexController', UsersIndexController)\n.controller('ProfileController', ProfileController)\n.controller('UserEditController', UserEditController)\n.controller('ProfileEditController', ProfileEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nProfileController.$inject = ['User', '$state', '$auth', '$http', '$scope'];\nfunction ProfileController(User, $state, $auth, $http, $scope) {\n  const profile = this;\n  const userData = $auth.getPayload();\n\n  let id = $state.params.id;\n\n  profile.usersMatches;\n\n  let usersId = userData._id;\n\n  if (id === '') {\n    id = usersId;\n  }\n\n  // is user viewing own profile?\n\n\n  function isOwnProfile() {\n    return usersId === id ? true : false;\n  }\n\n  User.get({ id }, (user) => {\n    profile.user = user;\n    const randomLike = profile.user.likes[Math.floor(Math.random()*profile.user.likes.length)];\n    getGifts(randomLike,'etsy');\n  });\n  profile.isLoggedIn = $auth.isAuthenticated;\n\n\n\n\n  // const match = ;\n  // User.get({match: match._id }, (matchedUser) => {\n  //   profile.match = matchedUser;\n  // });\n\n  function addLikes() {\n    event.preventDefault();\n\n    if(!profile.user.likes.includes(profile.likeToAddToArray)) {\n\n      profile.user.likes.push(profile.likeToAddToArray);\n      profile.likeToAddToArray = '';\n      profile.user.$update((res) => {\n        return res;\n      });\n      profile.message = '';\n    } else {\n      profile.message = 'You already like that';\n    }\n  }\n\n  function addDislikes() {\n    event.preventDefault();\n\n    if(!profile.user.dislikes.includes(profile.dislikeToAddToArray)) {\n\n      profile.user.dislikes.push(profile.dislikeToAddToArray);\n      profile.dislikeToAddToArray = '';\n      profile.user.$update((res) => {\n        return res;\n      });\n      profile.message = '';\n    } else {\n      profile.message = 'You already dislike that';\n    }\n  }\n\n  // function deleteLike($index) {\n  //   console.log(profile);\n  //   profile.user.likes.$remove(() => {\n  //     $state.go('profile');\n  //   });\n  // }\n\n  function removeLike(thing, index) {\n\n    const $index = profile.user.likes.indexOf(thing);\n    profile.user.likes.splice($index, 1);\n    profile.user.$update((res) => {\n      $state.reload();\n    });\n  }\n\n  function removeDislike(thing, index) {\n    const $index = profile.user.dislikes.indexOf(thing);\n    profile.user.dislikes.splice($index, 1);\n    profile.user.$update((res) => {\n      $state.reload();\n    });\n  }\n  // profile.remove = remove;\n\n  function addImage() {\n\n    profile.user.profileImage = profile.imageToAdd;\n\n    profile.user.$update((res) => {\n      $state.reload();\n\n    });\n  }\n\n\n  function getUserGroups() {\n    profile.usersGroups =[];\n    const requestURL = 'users/groups/' + id;\n    $http({\n      url: requestURL,\n      method: 'GET'\n    }).then((data) => {\n      profile.usersGroups = data.data;\n\n    }, (response)  => {\n      console.log(response);\n    });\n  }\n\n  function searchForMatch(nameKey, myArray){\n    for (var i=0; i < myArray.length; i++) {\n      if (myArray[i]['match'] === nameKey) {\n        return myArray[i];\n      }\n    }\n  }\n\n\n  function getUserMatches() {\n    profile.usersCurrentMatches ={};\n    profile.usersMatches = [];\n    const requestURL = 'users/groups/' + id;\n    $http({\n      url: requestURL,\n      method: 'GET'\n    }).then((data) => {\n      profile.usersCurrentMatches = data.data;\n      profile.usersCurrentMatches.forEach((obj)=>{\n        const resultObject = searchForMatch(id, obj.matches);\n        if (resultObject !== undefined) {\n          profile.usersMatches.push(resultObject);\n        }\n      });\n    }, (response)  => {\n      console.log(response);\n    });\n  }\n\n  function getGifts(keyword,site) {\n    profile.loaded = false;\n    profile.giftArray =[];\n    profile.site = site;\n\n    const requestURL = '/gifts/'+site+'/'+keyword;\n\n    if (site === \"amazon\") {\n\n      return $http({\n        url: requestURL,\n        method: 'GET'\n      }).then((data) => {\n        profile.giftArray = data.data.Items.Item.splice(0,12);\n        profile.loaded = true;\n\n      }, (response)  => {\n        console.log(response);\n      });\n    } else if (site === 'etsy') {\n\n      return $http({\n        url: requestURL,\n        method: 'GET'\n      }).then((data) => {\n\n        profile.loaded = true;\n\n        for (let i=0; i < 12 && i < data.data.results.length; i++) {\n\n          // transpose ETSY formatted response in amzn response format & add to giftArray\n          let etsyItem = {\n            DetailPageURL: data.data.results[i].url,\n            MediumImage: {\n              URL: data.data.results[i].MainImage.url_170x135\n            },\n            ItemAttributes: {\n              ListPrice: {\n                FormattedPrice: data.data.results[i].price\n              }\n            }\n          };\n          profile.giftArray.push(etsyItem);\n        }\n        console.log(profile.giftArray);\n\n    }, (response)  => {\n      console.log(response);\n    });\n  }\n\n\n}\ngetUserGroups();\ngetUserMatches();\n\nprofile.add = addLikes;\nprofile.getGifts = getGifts;\nprofile.addDislikes = addDislikes;\nprofile.removeLike = removeLike;\nprofile.removeDislike = removeDislike;\n\nprofile.isOwnProfile = isOwnProfile;\nprofile.giftArray = [];\nprofile.loaded = false;\nprofile.addImage = addImage;\n\n\n}\n\nProfileEditController.$inject = ['User', '$state'];\nfunction ProfileEditController(User, $state) {\n  const profileEdit = this;\n  profileEdit.profile = User.get($state.params);\n  function update() {\n    User.update(profileEdit.profile, () => {\n      $state.go('profile', $state.params);\n    });\n  }\n  this.update = update;\n}\n\nUserEditController.$inject = ['User', '$state'];\nfunction UserEditController(User, $state) {\n  const userEdit = this;\n\n  userEdit.user = User.get($state.params);\n\n  function update() {\n    userEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n\n    });\n  }\n\n  this.update = update;\n\n}\n"]}