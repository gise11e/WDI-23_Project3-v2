{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/dragDrop.js","js/models/group.js","js/controllers/groups.js","js/controllers/main.js","js/controllers/upload.js","js/models/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","facebook","clientId","console","log","RegisterController","$auth","$state","submit","signup","register","user","then","go","catch","res","data","error","code","form","email","$setValidity","passwordConfirmation","response","this","LoginController","User","$window","login","credentials","payload","getPayload","groupId","localStorage","getItem","setItem","_id","removeItem","authenticate","provider","isAuthenticated","dragDrop","reader","FileReader","restrict","replace","scope","base64","link","$scope","element","active","onload","result","$apply","on","e","preventDefault","file","dataTransfer","files","target","readAsDataURL","Group","$resource","id","update","method","getGroups","isArray","GroupsNewController","createGroupProfile","groupsNew","group","groupAdmin","groupMembers","push","save","addEmail","event","emailArray","emailToAddToArray","add","GroupsShowController","$http","drawMatches","token","getToken","req","groupsShow","headers","authorizaton","alert","isGroupAdmin","usersId","message","includes","sendEmail","groupName","deleteGroup","$remove","get","params","userData","delete","isLoggedIn","GroupsEditController","groupEdit","GroupsJoinController","userId","isInGroup","filter","member","length","$update","MainController","$rootScope","toggleMenu","main","menuVisible","logout","$on","UploadController","upload","UsersIndexController","usersIndex","all","query","ProfileController","profile","isOwnProfile","addLikes","likes","likeToAddToArray","addDislikes","dislikes","dislikeToAddToArray","removeLike","thing","index","$index","indexOf","splice","reload","removeDislike","addImage","profileImage","imageToAdd","getUserGroups","usersGroups","requestURL","searchForMatch","nameKey","myArray","i","getUserMatches","usersCurrentMatches","usersMatches","forEach","obj","resultObject","matches","undefined","getGifts","keyword","site","loaded","giftArray","Items","Item","results","etsyItem","DetailPageURL","MediumImage","URL","MainImage","url_170x135","ItemAttributes","ListPrice","FormattedPrice","price","randomLike","Math","floor","random","ProfileEditController","profileEdit","UserEditController","userEdit","angular","module","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n.module('elfyApp', ['ngMessages', 'ngResource', 'ui.router', 'satellizer'])\n.config(Router)\n.config(Auth);\n\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('splash', {\n    url: '/',\n    templateUrl: '/templates/splash.html',\n    controller: 'LoginController as login'\n  })\n  .state('profile', {\n    url: '/profile/:id',\n    templateUrl: '/templates/profile.html',\n    controller: 'ProfileController as profile'\n  })\n  .state('groupsNew', {\n    url: '/group/new',\n    templateUrl: '/templates/groupNew.html',\n    controller: 'GroupsNewController as groupsNew'\n  })\n  .state('groupProfile', {\n    url: '/group/profile/:id',\n    templateUrl: '/templates/groupProfile.html',\n    controller: 'GroupsShowController as groupsShow'\n  })\n  .state('groupsEdit', {\n    url: '/group/profile/:id/edit',\n    templateUrl: '/templates/groupsEdit.html',\n    controller: 'GroupsEditController as groupsEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('groupJoin', {\n    url: '/join/:groupId',\n    templateUrl: '/templates/login.html',\n    controller: 'GroupsJoinController as groupsJoin'\n  })\n  .state('profileEdit', {\n    url: '/profile/:id/edit',\n    templateUrl: '/templates/profileEdit.html',\n    controller: 'ProfileEditController as profileEdit'\n  })\n  .state('groupEdit', {\n    url: '/group/:id/edit',\n    templateUrl: '/templates/groupEdit.html',\n    controller: 'GroupEditController as groupEdit'\n  });\n\n  $urlRouterProvider.otherwise('/');\n\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.facebook({\n    clientId: '1117238161723560'\n  });\n\n  console.log($authProvider);\n\n}\n","angular.module('elfyApp')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    })\n    .catch((res) => {\n      console.log(res);\n      if(res.data.error.code === 11000) {\n        register.form.email.$setValidity('taken', false);\n      }\n      if(res.data.error.passwordConfirmation) {\n        register.form.passwordConfirmation.$setValidity('match', false);\n      }\n    }).catch((response) => {\n      console.log(response);\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['User','$auth','$state', '$window'];\n\nfunction LoginController(User, $auth, $state, $window) {\n  const login = this;\n  login.credentials = {};\n\n  //forward state if authenticated\n  if($auth.isAuthenticated()) {\n    $state.go('profile');\n  }\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      const payload = $auth.getPayload();\n      const groupId = $window.localStorage.getItem('groupId');\n\n      $window.localStorage.setItem('userId', payload._id);\n\n      if(groupId) {\n        $window.localStorage.removeItem('groupId');\n        $state.go('groupJoin', { groupId });\n      } else {\n        $state.go('profile');\n      }\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then(() => {\n      $state.go('profile');\n    });\n  }\n\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('elfyApp')\n  .directive('dragDrop', dragDrop);\n\nfunction dragDrop () {\n\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n\n      $scope.base64 = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n\n      element\n        .on('dragover', () => {\n          $scope.active = true;\n          $scope.$apply();\n          console.log('yo you are hovering');\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n          console.log('you dropped');\n          const file = (e.dataTransfer.files || e.target.files)[0];\n\n          reader.readAsDataURL(file);\n        });\n    }\n  };\n}\n","angular.module('elfyApp')\n  .factory('Group', Group);\n\nGroup.$inject = ['$resource'];\nfunction Group($resource) {\n\n  return new $resource('/groups/:id', { id: '@_id' }, {\n    update: { method: 'PUT' },\n    getGroups: {method: 'GET', isArray: true}\n  });\n}\n","angular.module('elfyApp')\n.controller('GroupsNewController', GroupsNewController)\n.controller('GroupsShowController', GroupsShowController)\n.controller('GroupsEditController', GroupsEditController)\n.controller('GroupsJoinController', GroupsJoinController);\n// .controller('groupController', groupController);\n\nGroupsNewController.$inject = ['Group', '$state', '$auth'];\nfunction GroupsNewController(Group, $state, $auth) {\n  const groupsNew = this;\n  groupsNew.group = {};\n  groupsNew.group.groupMembers= [];\n\n\n  function createGroupProfile() {\n    groupsNew.group.groupAdmin = $auth.getPayload()._id;\n    groupsNew.group.groupMembers.push($auth.getPayload()._id);\n\n\n    Group.save(groupsNew.group, (res) => {\n\n      $state.go('groupProfile',{id: res._id});\n\n    });\n  }\n\n  function addEmail() {\n    event.preventDefault();\n    groupsNew.emailArray.push(groupsNew.emailToAddToArray);\n  }\n\n  groupsNew.createGroupProfile = createGroupProfile;\n  groupsNew.add = addEmail;\n}\n\nGroupsShowController.$inject = ['Group', '$state', '$auth', '$http'];\nfunction GroupsShowController(Group, $state, $auth, $http) {\n  const groupsShow = this;\n  // console.log(groupsShow);\n  groupsShow.group = Group.get($state.params);\n\n  groupsShow.emailToAddToArray = '';\n  groupsShow.emailArray = [];\n\n  function drawMatches() {\n    const token = `Bearer ${$auth.getToken()}`;\n    const req = {\n      method: 'PUT',\n      url: '/groups/' + groupsShow.group._id + '/draw',\n      headers: { authorizaton: token }\n    };\n    $http(req).then(() => alert('members matched - check your email!'));\n  }\n\n  const userData = $auth.getPayload();\n  const usersId = userData._id;\n\n  function isGroupAdmin() {\n    console.log('Group admin ID:', groupsShow.group.groupAdmin._id, 'Users ID', usersId);\n    console.log(groupsShow.group.groupAdmin._id === usersId ? true : false);\n    return groupsShow.group.groupAdmin._id === usersId ? true : false;\n  }\n\n  function addEmail() {\n    groupsShow.message ='';\n    if(!groupsShow.emailArray.includes(groupsShow.emailToAddToArray)) {\n      groupsShow.emailArray.push(groupsShow.emailToAddToArray);\n      groupsShow.emailToAddToArray = '';\n\n    } else {\n      groupsShow.message = 'Email already added';\n    }\n  }\n  function sendEmail() {\n    console.log(groupsShow);\n    const token = `Bearer ${$auth.getToken()}`;\n    const req = {\n      method: 'POST',\n      url: '/sendEmail',\n      headers: { authorizaton: token },\n      data: { emailArray: groupsShow.emailArray, groupName: groupsShow.group.groupName, groupId: groupsShow.group._id }\n    };\n\n    $http(req)\n    .then((res) => {\n      groupsShow.emailArray = [];\n      groupsShow.message = 'Your Invites Have Been Sent!';\n      console.log(res);\n    });\n  }\n\n  function deleteGroup() {\n    groupsShow.group.$remove(() => {\n      $state.go('groupsNew');\n    });\n  }\n\n  groupsShow.delete = deleteGroup;\n  groupsShow.isLoggedIn = $auth.isAuthenticated;\n  groupsShow.addEmail = addEmail;\n  groupsShow.sendEmail = sendEmail;\n  groupsShow.drawMatches = drawMatches;\n  groupsShow.isGroupAdmin = isGroupAdmin;\n}\n\n\nGroupsEditController.$inject = ['Group', '$state'];\nfunction GroupsEditController(Group, $state) {\n  const groupEdit = this;\n\n  groupEdit.group = Group.get($state.params);\n\n  function update() {\n    Group.update(groupEdit.group, () => {\n      $state.go('groupProfile', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n\n\nGroupsJoinController.$inject = ['Group', 'User','$state', '$auth', '$window'];\nfunction GroupsJoinController(Group, User, $state, $auth, $window) {\n\n  // check if user is logged in...\n  if($auth.isAuthenticated()) {\n    const userId = $auth.getPayload()._id;\n    const groupId = $state.params.groupId;\n    // if yes, get the group\n    Group.get({ id: groupId }, (group) => {\n\n      const isInGroup = group.groupMembers.filter(function(member){\n        return member._id === userId;\n      });\n\n      if (isInGroup.length === 0) {\n        group.groupMembers.push(userId);\n        group.$update(() => {\n          $state.go('groupProfile', {id: groupId });\n        });\n\n      } else {\n        $state.go('groupProfile', {id: groupId });\n      }\n    });\n  } else {\n    console.log('hey');\n    // if no, store the group Id in localStorage, redirect the user to login/register state(s)\n    $window.localStorage.setItem('groupId', $state.params.groupId);\n    $state.go('register');\n  }\n\n  // after login/register, if there is a group Id in localStorage, send the join request & remove the group Id\n\n\n\n}\n","angular.module('elfyApp')\n\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', '$http'];\nfunction MainController($auth, $state, $rootScope, $http) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.menuVisible = false;\n\n  $rootScope.$on('$stateChangeStart', () => {\n    main.menuVisible = false;\n  });\n\n  function toggleMenu() {\n    main.menuVisible = !main.menuVisible;\n  }\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      localStorage.removeItem('userId');\n      $state.go('splash');\n    });\n  }\n\n  // const protectedStates = ['register', 'login'];\n\n  // function secureState(e, toSate) {\n  //   main.message = null;\n  //   if(!$auth.isAuthenticated() && protectedStates.includes(toSate.name)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there!';\n  //\n  //   }\n  //\n  // }\n  //\n  // $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n  main.toggleMenu = toggleMenu;\n\n\n}\n","angular.module('elfyApp')\n  .controller('UploadController', UploadController);\n\nfunction UploadController() {\n  const upload = this;\n\n  upload.data = {};\n}\n","angular.module('elfyApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n    \n  });\n}\n","angular.module('elfyApp')\n.controller('UsersIndexController', UsersIndexController)\n.controller('ProfileController', ProfileController)\n.controller('UserEditController', UserEditController)\n.controller('ProfileEditController', ProfileEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nProfileController.$inject = ['User', '$state', '$auth', '$http', '$scope', '$rootScope'];\nfunction ProfileController(User, $state, $auth, $http, $scope, $rootScope) {\n  const profile = this;\n  const userData = $auth.getPayload();\n  profile.menuVisible = false;\n\n  $rootScope.$on('$stateChangeStart', () => {\n    profile.menuVisible = false;\n  });\n\n  function toggleMenu() {\n    profile.menuVisible = !profile.menuVisible;\n  }\n\n  profile.toggleMenu = toggleMenu;\n\n\n  let id = $state.params.id;\n\n  profile.usersMatches;\n\n  const usersId = userData._id;\n\n\n  if (id === '') {\n    id = usersId;\n  }\n\n\n  // is user viewing own profile?\n\n\n  function isOwnProfile() {\n    return usersId === id ? true : false;\n  }\n\n  User.get({ id }, (user) => {\n    profile.user = user;\n    const randomLike = profile.user.likes[Math.floor(Math.random()*profile.user.likes.length)];\n    getGifts(randomLike,'etsy');\n  });\n  profile.isLoggedIn = $auth.isAuthenticated;\n\n\n\n\n  // const match = ;\n  // User.get({match: match._id }, (matchedUser) => {\n  //   profile.match = matchedUser;\n  // });\n\n\n\n  function addLikes() {\n    event.preventDefault();\n\n    if(!profile.user.likes.includes(profile.likeToAddToArray)) {\n\n      profile.user.likes.push(profile.likeToAddToArray);\n      profile.likeToAddToArray = '';\n      profile.user.$update((res) => {\n        return res;\n      });\n      profile.message = '';\n    } else {\n      profile.message = 'You already like that';\n    }\n  }\n\n  function addDislikes() {\n    event.preventDefault();\n\n    if(!profile.user.dislikes.includes(profile.dislikeToAddToArray)) {\n\n      profile.user.dislikes.push(profile.dislikeToAddToArray);\n      profile.dislikeToAddToArray = '';\n      profile.user.$update((res) => {\n        return res;\n      });\n      profile.message = '';\n    } else {\n      profile.message = 'You already dislike that';\n    }\n  }\n\n  // function deleteLike($index) {\n  //   console.log(profile);\n  //   profile.user.likes.$remove(() => {\n  //     $state.go('profile');\n  //   });\n  // }\n\n  function removeLike(thing, index) {\n\n    const $index = profile.user.likes.indexOf(thing);\n    profile.user.likes.splice($index, 1);\n    profile.user.$update(() => {\n      $state.reload();\n    });\n  }\n\n  function removeDislike(thing, index) {\n    const $index = profile.user.dislikes.indexOf(thing);\n    profile.user.dislikes.splice($index, 1);\n    profile.user.$update(() => {\n      $state.reload();\n    });\n  }\n  // profile.remove = remove;\n\n  function addImage() {\n\n    profile.user.profileImage = profile.imageToAdd;\n\n    profile.user.$update(() => {\n      $state.reload();\n\n    });\n  }\n\n\n  function getUserGroups() {\n    profile.usersGroups =[];\n    const requestURL = 'users/groups/' + id;\n    $http({\n      url: requestURL,\n      method: 'GET'\n    }).then((data) => {\n      profile.usersGroups = data.data;\n\n    }, (response)  => {\n      console.log(response);\n    });\n  }\n\n  function searchForMatch(nameKey, myArray){\n    for (var i=0; i < myArray.length; i++) {\n      if (myArray[i]['match'] === nameKey) {\n        return myArray[i];\n      }\n    }\n  }\n\n\n  function getUserMatches() {\n    profile.usersCurrentMatches ={};\n    profile.usersMatches = [];\n    const requestURL = 'users/groups/' + id;\n    $http({\n      url: requestURL,\n      method: 'GET'\n    }).then((data) => {\n      profile.usersCurrentMatches = data.data;\n      profile.usersCurrentMatches.forEach((obj)=>{\n        const resultObject = searchForMatch(id, obj.matches);\n        if (resultObject !== undefined) {\n          profile.usersMatches.push(resultObject);\n        }\n      });\n    }, (response)  => {\n      console.log(response);\n    });\n  }\n\n  function getGifts(keyword,site) {\n    profile.loaded = false;\n    profile.giftArray =[];\n    profile.site = site;\n\n    const requestURL = '/gifts/'+site+'/'+keyword;\n\n    if (site === 'amazon') {\n\n      return $http({\n        url: requestURL,\n        method: 'GET'\n      }).then((data) => {\n        profile.giftArray = data.data.Items.Item.splice(0,12);\n        profile.loaded = true;\n\n      }, (response)  => {\n        console.log(response);\n      });\n    } else if (site === 'etsy') {\n\n      return $http({\n        url: requestURL,\n        method: 'GET'\n      }).then((data) => {\n\n        profile.loaded = true;\n\n        for (let i=0; i < 12 && i < data.data.results.length; i++) {\n\n          // transpose ETSY formatted response in amzn response format & add to giftArray\n          const etsyItem = {\n            DetailPageURL: data.data.results[i].url,\n            MediumImage: {\n              URL: data.data.results[i].MainImage.url_170x135\n            },\n            ItemAttributes: {\n              ListPrice: {\n                FormattedPrice: data.data.results[i].price\n              }\n            }\n          };\n          profile.giftArray.push(etsyItem);\n        }\n        console.log(profile.giftArray);\n\n      }, (response)  => {\n        console.log(response);\n      });\n    }\n\n\n  }\n  getUserGroups();\n  getUserMatches();\n\n  profile.add = addLikes;\n  profile.getGifts = getGifts;\n  profile.addDislikes = addDislikes;\n  profile.removeLike = removeLike;\n  profile.removeDislike = removeDislike;\n\n  profile.isOwnProfile = isOwnProfile;\n  profile.giftArray = [];\n  profile.loaded = false;\n  profile.addImage = addImage;\n\n\n}\n\nProfileEditController.$inject = ['User', '$state'];\nfunction ProfileEditController(User, $state) {\n  const profileEdit = this;\n  profileEdit.profile = User.get($state.params);\n  function update() {\n    User.update(profileEdit.profile, () => {\n      $state.go('profile', $state.params);\n    });\n  }\n  this.update = update;\n}\n\nUserEditController.$inject = ['User', '$state'];\nfunction UserEditController(User, $state) {\n  const userEdit = this;\n\n  userEdit.user = User.get($state.params);\n\n  function update() {\n    userEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n\n    });\n  }\n\n  this.update = update;\n\n}\n"]}